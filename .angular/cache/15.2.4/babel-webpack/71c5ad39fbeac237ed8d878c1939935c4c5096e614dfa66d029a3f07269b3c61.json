{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from \"@angular/core\";\nimport productsData from \"src/assets/data/products.json\"; // Import data from a JSON file\nlet AppComponent = class AppComponent {\n  constructor() {\n    this.products = productsData; // Assign the data from the JSON file to the 'products' property\n    // Initialize the property and manufacturer filter options, and set the initial filtered products to all products\n    this.propertyOptions = this.getPropertyOptions();\n    this.manufacturerOptions = this.getManufacturerOptions();\n    this.filteredProducts = this.products;\n  }\n  // Function to generate the property filter options\n  getPropertyOptions() {\n    // Declare an empty array to store the property options\n    const propertyOptions = [];\n    // Declare an empty object to store the count of products for each property\n    const productCounts = {};\n    // Loop through each product and count the number of products for each property\n    this.products.forEach(product => {\n      product.properties.forEach(property => {\n        if (productCounts.hasOwnProperty(property)) {\n          productCounts[property]++;\n        } else {\n          productCounts[property] = 1;\n        }\n      });\n    });\n    // Loop through each property and create an option for it with the count of products that have that property\n    Object.keys(productCounts).forEach(property => {\n      const count = productCounts[property];\n      propertyOptions.push({\n        label: `${property} (${count})`,\n        value: property,\n        selected: false,\n        count: count\n      });\n    });\n    // Return the array of property options\n    return propertyOptions;\n  }\n  // Function to generate the manufacturer filter options\n  getManufacturerOptions() {\n    // Declare an array to hold the manufacturer filter options, with an initial empty array\n    const manufacturerOptions = [];\n    // Declare an object to hold the count of products for each manufacturer, with an initial empty object\n    const manufacturerCounts = {};\n    // Loop through each product to count the number of products for each manufacturer\n    this.products.forEach(product => {\n      const manufacturer = product.manufacturer;\n      if (manufacturerCounts.hasOwnProperty(manufacturer)) {\n        manufacturerCounts[manufacturer]++;\n      } else {\n        manufacturerCounts[manufacturer] = 1;\n      }\n    });\n    // Loop through each manufacturer and create an option, including the product count, and add it to the options array\n    Object.keys(manufacturerCounts).forEach(manufacturer => {\n      const count = manufacturerCounts[manufacturer];\n      manufacturerOptions.push({\n        label: `${manufacturer} (${count})`,\n        value: manufacturer,\n        selected: false,\n        count: count\n      });\n    });\n    // Return the options array\n    return manufacturerOptions;\n  }\n  filterProducts() {\n    // Get the selected property and manufacturer filter options\n    const selectedProperties = this.propertyOptions.filter(option => option.selected);\n    const selectedManufacturers = this.manufacturerOptions.filter(option => option.selected);\n    // Filter the products based on the selected filter options\n    this.filteredProducts = this.products.filter(product => {\n      // Check if the product has all selected properties\n      const hasSelectedProperties = selectedProperties.every(property => product.properties.includes(property.value));\n      // Check if the product has any selected manufacturer\n      const hasSelectedManufacturers = selectedManufacturers.some(manufacturer => product.manufacturer === manufacturer.value);\n      // If both property and manufacturer filters are selected, only show products that match both\n      if (selectedProperties.length > 0 && selectedManufacturers.length > 0) {\n        return hasSelectedProperties && hasSelectedManufacturers;\n      }\n      // If only property filter is selected, show products that match any selected property\n      else if (selectedProperties.length > 0) {\n        return hasSelectedProperties;\n      }\n      // If only manufacturer filter is selected, show products that match any selected manufacturer\n      else if (selectedManufacturers.length > 0) {\n        return hasSelectedManufacturers;\n      }\n      // If no filters are selected, show all products\n      else {\n        return true;\n      }\n    });\n  }\n};\nAppComponent = __decorate([Component({\n  selector: \"app-root\",\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.scss\"] // Define the style file for the component\n})], AppComponent);\nexport { AppComponent };","map":{"version":3,"mappings":"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","names":["Component","productsData","AppComponent","constructor","propertyOptions","getPropertyOptions","manufacturerOptions","getManufacturerOptions","filteredProducts","products","productCounts","forEach","product","properties","property","hasOwnProperty","Object","keys","count","push","label","value","selected","manufacturerCounts","manufacturer","filterProducts","selectedProperties","filter","option","selectedManufacturers","hasSelectedProperties","every","includes","hasSelectedManufacturers","some","length","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/albanselimi/Desktop/git-hub-projects/product-filter-task/src/app/app.component.ts"],"sourcesContent":["import { Component } from \"@angular/core\";\nimport productsData from \"src/assets/data/products.json\"; // Import data from a JSON file\n\n@Component({\n  selector: \"app-root\",\n  templateUrl: \"./app.component.html\", // Define the template file for the component\n  styleUrls: [\"./app.component.scss\"], // Define the style file for the component\n})\nexport class AppComponent {\n  products = productsData; // Assign the data from the JSON file to the 'products' property\n  propertyOptions: { label: string; value: string; selected: boolean }[]; // Declare a property to hold the property filter options\n  manufacturerOptions: { label: string; value: string; selected: boolean }[]; // Declare a property to hold the manufacturer filter options\n  filteredProducts: any[]; // Declare a property to hold the filtered products\n\n  constructor() {\n    // Initialize the property and manufacturer filter options, and set the initial filtered products to all products\n    this.propertyOptions = this.getPropertyOptions();\n    this.manufacturerOptions = this.getManufacturerOptions();\n    this.filteredProducts = this.products;\n  }\n\n  // Function to generate the property filter options\n  getPropertyOptions() {\n    // Declare an empty array to store the property options\n    const propertyOptions: {\n      label: string;\n      value: string;\n      selected: boolean;\n      count: number;\n    }[] = [];\n\n    // Declare an empty object to store the count of products for each property\n    const productCounts: { [property: string]: number } = {};\n\n    // Loop through each product and count the number of products for each property\n    this.products.forEach((product) => {\n      product.properties.forEach((property) => {\n        if (productCounts.hasOwnProperty(property)) {\n          productCounts[property]++;\n        } else {\n          productCounts[property] = 1;\n        }\n      });\n    });\n\n    // Loop through each property and create an option for it with the count of products that have that property\n    Object.keys(productCounts).forEach((property) => {\n      const count = productCounts[property];\n      propertyOptions.push({\n        label: `${property} (${count})`,\n        value: property,\n        selected: false,\n        count: count,\n      });\n    });\n\n    // Return the array of property options\n    return propertyOptions;\n  }\n\n  // Function to generate the manufacturer filter options\n  getManufacturerOptions() {\n    // Declare an array to hold the manufacturer filter options, with an initial empty array\n    const manufacturerOptions: {\n      label: string;\n      value: string;\n      selected: boolean;\n      count: number;\n    }[] = [];\n\n    // Declare an object to hold the count of products for each manufacturer, with an initial empty object\n    const manufacturerCounts: { [manufacturer: string]: number } = {};\n\n    // Loop through each product to count the number of products for each manufacturer\n    this.products.forEach((product) => {\n      const manufacturer = product.manufacturer;\n      if (manufacturerCounts.hasOwnProperty(manufacturer)) {\n        manufacturerCounts[manufacturer]++;\n      } else {\n        manufacturerCounts[manufacturer] = 1;\n      }\n    });\n\n    // Loop through each manufacturer and create an option, including the product count, and add it to the options array\n    Object.keys(manufacturerCounts).forEach((manufacturer) => {\n      const count = manufacturerCounts[manufacturer];\n      manufacturerOptions.push({\n        label: `${manufacturer} (${count})`,\n        value: manufacturer,\n        selected: false,\n        count: count,\n      });\n    });\n\n    // Return the options array\n    return manufacturerOptions;\n  }\n\n  filterProducts() {\n    // Get the selected property and manufacturer filter options\n    const selectedProperties = this.propertyOptions.filter(\n      (option) => option.selected\n    );\n    const selectedManufacturers = this.manufacturerOptions.filter(\n      (option) => option.selected\n    );\n\n    // Filter the products based on the selected filter options\n    this.filteredProducts = this.products.filter((product) => {\n      // Check if the product has all selected properties\n      const hasSelectedProperties = selectedProperties.every((property) =>\n        product.properties.includes(property.value)\n      );\n\n      // Check if the product has any selected manufacturer\n      const hasSelectedManufacturers = selectedManufacturers.some(\n        (manufacturer) => product.manufacturer === manufacturer.value\n      );\n\n      // If both property and manufacturer filters are selected, only show products that match both\n      if (selectedProperties.length > 0 && selectedManufacturers.length > 0) {\n        return hasSelectedProperties && hasSelectedManufacturers;\n      }\n      // If only property filter is selected, show products that match any selected property\n      else if (selectedProperties.length > 0) {\n        return hasSelectedProperties;\n      }\n      // If only manufacturer filter is selected, show products that match any selected manufacturer\n      else if (selectedManufacturers.length > 0) {\n        return hasSelectedManufacturers;\n      }\n      // If no filters are selected, show all products\n      else {\n        return true;\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}