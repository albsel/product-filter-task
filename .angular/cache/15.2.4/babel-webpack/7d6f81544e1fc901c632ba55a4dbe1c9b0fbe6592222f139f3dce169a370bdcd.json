{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from \"@angular/core\";\nimport productsData from \"src/assets/data/products.json\";\nlet AppComponent = class AppComponent {\n  constructor() {\n    this.products = productsData;\n    this.propertyOptions = this.getPropertyOptions();\n    this.manufacturerOptions = this.getManufacturerOptions();\n    this.filteredProducts = this.products;\n  }\n  getPropertyOptions() {\n    const propertyOptions = [];\n    this.products.forEach(product => {\n      product.properties.forEach(property => {\n        if (!propertyOptions.some(option => option.value === property)) {\n          propertyOptions.push({\n            label: property,\n            value: property,\n            selected: false\n          });\n        }\n      });\n    });\n    return propertyOptions;\n  }\n  getManufacturerOptions() {\n    const manufacturerOptions = [];\n    this.products.forEach(product => {\n      const manufacturer = product.manufacturer;\n      if (!manufacturerOptions.some(option => option.value === manufacturer)) {\n        manufacturerOptions.push({\n          label: manufacturer,\n          value: manufacturer,\n          selected: false\n        });\n      }\n    });\n    return manufacturerOptions;\n  }\n  filterProducts() {\n    const selectedProperties = this.propertyOptions.filter(option => option.selected);\n    const selectedManufacturers = this.manufacturerOptions.filter(option => option.selected);\n    this.filteredProducts = this.products.filter(product => {\n      const hasSelectedProperties = selectedProperties.every(property => product.properties.includes(property.value));\n      const hasSelectedManufacturers = selectedManufacturers.some(manufacturer => product.manufacturer === manufacturer.value);\n      return hasSelectedProperties && hasSelectedManufacturers;\n    });\n  }\n};\nAppComponent = __decorate([Component({\n  selector: \"app-root\",\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.scss\"]\n})], AppComponent);\nexport { AppComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,OAAOC,YAAY,MAAM,+BAA+B;AAOjD,IAAMC,YAAY,GAAlB,MAAMA,YAAY;EAMvBC;IALA,aAAQ,GAAGF,YAAY;IAMrB,IAAI,CAACG,eAAe,GAAG,IAAI,CAACC,kBAAkB,EAAE;IAChD,IAAI,CAACC,mBAAmB,GAAG,IAAI,CAACC,sBAAsB,EAAE;IACxD,IAAI,CAACC,gBAAgB,GAAG,IAAI,CAACC,QAAQ;EACvC;EAEAJ,kBAAkB;IAChB,MAAMD,eAAe,GAIf,EAAE;IACR,IAAI,CAACK,QAAQ,CAACC,OAAO,CAAEC,OAAO,IAAI;MAChCA,OAAO,CAACC,UAAU,CAACF,OAAO,CAAEG,QAAQ,IAAI;QACtC,IAAI,CAACT,eAAe,CAACU,IAAI,CAAEC,MAAM,IAAKA,MAAM,CAACC,KAAK,KAAKH,QAAQ,CAAC,EAAE;UAChET,eAAe,CAACa,IAAI,CAAC;YACnBC,KAAK,EAAEL,QAAQ;YACfG,KAAK,EAAEH,QAAQ;YACfM,QAAQ,EAAE;WACX,CAAC;;MAEN,CAAC,CAAC;IACJ,CAAC,CAAC;IACF,OAAOf,eAAe;EACxB;EAEAG,sBAAsB;IACpB,MAAMD,mBAAmB,GAInB,EAAE;IACR,IAAI,CAACG,QAAQ,CAACC,OAAO,CAAEC,OAAO,IAAI;MAChC,MAAMS,YAAY,GAAGT,OAAO,CAACS,YAAY;MACzC,IACE,CAACd,mBAAmB,CAACQ,IAAI,CAAEC,MAAM,IAAKA,MAAM,CAACC,KAAK,KAAKI,YAAY,CAAC,EACpE;QACAd,mBAAmB,CAACW,IAAI,CAAC;UACvBC,KAAK,EAAEE,YAAY;UACnBJ,KAAK,EAAEI,YAAY;UACnBD,QAAQ,EAAE;SACX,CAAC;;IAEN,CAAC,CAAC;IACF,OAAOb,mBAAmB;EAC5B;EAEAe,cAAc;IACZ,MAAMC,kBAAkB,GAAG,IAAI,CAAClB,eAAe,CAACmB,MAAM,CACnDR,MAAM,IAAKA,MAAM,CAACI,QAAQ,CAC5B;IACD,MAAMK,qBAAqB,GAAG,IAAI,CAAClB,mBAAmB,CAACiB,MAAM,CAC1DR,MAAM,IAAKA,MAAM,CAACI,QAAQ,CAC5B;IACD,IAAI,CAACX,gBAAgB,GAAG,IAAI,CAACC,QAAQ,CAACc,MAAM,CAAEZ,OAAO,IAAI;MACvD,MAAMc,qBAAqB,GAAGH,kBAAkB,CAACI,KAAK,CAAEb,QAAQ,IAC9DF,OAAO,CAACC,UAAU,CAACe,QAAQ,CAACd,QAAQ,CAACG,KAAK,CAAC,CAC5C;MACD,MAAMY,wBAAwB,GAAGJ,qBAAqB,CAACV,IAAI,CACxDM,YAAY,IAAKT,OAAO,CAACS,YAAY,KAAKA,YAAY,CAACJ,KAAK,CAC9D;MACD,OAAOS,qBAAqB,IAAIG,wBAAwB;IAC1D,CAAC,CAAC;EACJ;CACD;AAtEY1B,YAAY,eALxBF,SAAS,CAAC;EACT6B,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,sBAAsB;EACnCC,SAAS,EAAE,CAAC,sBAAsB;CACnC,CAAC,GACW7B,YAAY,CAsExB;SAtEYA,YAAY","names":["Component","productsData","AppComponent","constructor","propertyOptions","getPropertyOptions","manufacturerOptions","getManufacturerOptions","filteredProducts","products","forEach","product","properties","property","some","option","value","push","label","selected","manufacturer","filterProducts","selectedProperties","filter","selectedManufacturers","hasSelectedProperties","every","includes","hasSelectedManufacturers","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/albanselimi/Desktop/git-hub-projects/product-filter-task/src/app/app.component.ts"],"sourcesContent":["import { Component } from \"@angular/core\";\nimport productsData from \"src/assets/data/products.json\";\n\n@Component({\n  selector: \"app-root\",\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.scss\"],\n})\nexport class AppComponent {\n  products = productsData;\n  propertyOptions: { label: string; value: string; selected: boolean }[];\n  manufacturerOptions: { label: string; value: string; selected: boolean }[];\n  filteredProducts: any[];\n\n  constructor() {\n    this.propertyOptions = this.getPropertyOptions();\n    this.manufacturerOptions = this.getManufacturerOptions();\n    this.filteredProducts = this.products;\n  }\n\n  getPropertyOptions() {\n    const propertyOptions: {\n      label: string;\n      value: string;\n      selected: boolean;\n    }[] = [];\n    this.products.forEach((product) => {\n      product.properties.forEach((property) => {\n        if (!propertyOptions.some((option) => option.value === property)) {\n          propertyOptions.push({\n            label: property,\n            value: property,\n            selected: false,\n          });\n        }\n      });\n    });\n    return propertyOptions;\n  }\n\n  getManufacturerOptions() {\n    const manufacturerOptions: {\n      label: string;\n      value: string;\n      selected: boolean;\n    }[] = [];\n    this.products.forEach((product) => {\n      const manufacturer = product.manufacturer;\n      if (\n        !manufacturerOptions.some((option) => option.value === manufacturer)\n      ) {\n        manufacturerOptions.push({\n          label: manufacturer,\n          value: manufacturer,\n          selected: false,\n        });\n      }\n    });\n    return manufacturerOptions;\n  }\n\n  filterProducts() {\n    const selectedProperties = this.propertyOptions.filter(\n      (option) => option.selected\n    );\n    const selectedManufacturers = this.manufacturerOptions.filter(\n      (option) => option.selected\n    );\n    this.filteredProducts = this.products.filter((product) => {\n      const hasSelectedProperties = selectedProperties.every((property) =>\n        product.properties.includes(property.value)\n      );\n      const hasSelectedManufacturers = selectedManufacturers.some(\n        (manufacturer) => product.manufacturer === manufacturer.value\n      );\n      return hasSelectedProperties && hasSelectedManufacturers;\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}