{"ast":null,"code":"import productsData from \"src/assets/data/products.json\"; // Import data from a JSON file\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nfunction AppComponent_ng_container_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 12)(2, \"span\", 13);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"input\", 14);\n    i0.ɵɵlistener(\"ngModelChange\", function AppComponent_ng_container_8_Template_input_ngModelChange_4_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const option_r3 = restoredCtx.$implicit;\n      return i0.ɵɵresetView(option_r3.selected = $event);\n    })(\"change\", function AppComponent_ng_container_8_Template_input_change_4_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.filterProducts());\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const option_r3 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(option_r3.label);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"value\", option_r3.value)(\"ngModel\", option_r3.selected);\n  }\n}\nfunction AppComponent_ng_container_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 12)(2, \"span\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"input\", 14);\n    i0.ɵɵlistener(\"ngModelChange\", function AppComponent_ng_container_12_Template_input_ngModelChange_4_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const option_r7 = restoredCtx.$implicit;\n      return i0.ɵɵresetView(option_r7.selected = $event);\n    })(\"change\", function AppComponent_ng_container_12_Template_input_change_4_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.filterProducts());\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const option_r7 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(option_r7.label);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"value\", option_r7.value)(\"ngModel\", option_r7.selected);\n  }\n}\nfunction AppComponent_div_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵelement(1, \"img\", 16);\n    i0.ɵɵelementStart(2, \"div\", 17)(3, \"p\", 18);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"p\", 19);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"p\", 20);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"p\", 21);\n    i0.ɵɵtext(10, \"Preis inkl. MwSt., zzgl.Versand\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const product_r11 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"src\", product_r11.image, i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(product_r11.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", product_r11.price, \" \\u20AC\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\" \", product_r11.basePrice.price, \"/\", product_r11.basePrice.unit, \" \");\n  }\n}\nexport class AppComponent {\n  constructor() {\n    this.products = productsData; // Assign the data from the JSON file to the 'products' property\n    // Initialize the property and manufacturer filter options, and set the initial filtered products to all products\n    this.propertyOptions = this.getPropertyOptions();\n    this.manufacturerOptions = this.getManufacturerOptions();\n    this.filteredProducts = this.products;\n  }\n  // Function to generate the property filter options\n  getPropertyOptions() {\n    // Declare an empty array to store the property options\n    const propertyOptions = [];\n    // Declare an empty object to store the count of products for each property\n    const productCounts = {};\n    // Loop through each product and count the number of products for each property\n    this.products.forEach(product => {\n      product.properties.forEach(property => {\n        if (productCounts.hasOwnProperty(property)) {\n          productCounts[property]++;\n        } else {\n          productCounts[property] = 1;\n        }\n      });\n    });\n    // Loop through each property and create an option for it with the count of products that have that property\n    Object.keys(productCounts).forEach(property => {\n      const count = productCounts[property];\n      propertyOptions.push({\n        label: `${property} (${count})`,\n        value: property,\n        selected: false,\n        count: count\n      });\n    });\n    // Return the array of property options\n    return propertyOptions;\n  }\n  // Function to generate the manufacturer filter options\n  getManufacturerOptions() {\n    // Declare an array to hold the manufacturer filter options, with an initial empty array\n    const manufacturerOptions = [];\n    // Declare an object to hold the count of products for each manufacturer, with an initial empty object\n    const manufacturerCounts = {};\n    // Loop through each product to count the number of products for each manufacturer\n    this.products.forEach(product => {\n      const manufacturer = product.manufacturer;\n      if (manufacturerCounts.hasOwnProperty(manufacturer)) {\n        manufacturerCounts[manufacturer]++;\n      } else {\n        manufacturerCounts[manufacturer] = 1;\n      }\n    });\n    // Loop through each manufacturer and create an option, including the product count, and add it to the options array\n    Object.keys(manufacturerCounts).forEach(manufacturer => {\n      const count = manufacturerCounts[manufacturer];\n      manufacturerOptions.push({\n        label: `${manufacturer} (${count})`,\n        value: manufacturer,\n        selected: false,\n        count: count\n      });\n    });\n    // Return the options array\n    return manufacturerOptions;\n  }\n  filterProducts() {\n    // Get the selected property and manufacturer filter options\n    const selectedProperties = this.propertyOptions.filter(option => option.selected);\n    const selectedManufacturers = this.manufacturerOptions.filter(option => option.selected);\n    // Filter the products based on the selected filter options\n    this.filteredProducts = this.products.filter(product => {\n      // Check if the product has all selected properties\n      const hasSelectedProperties = selectedProperties.every(property => product.properties.includes(property.value));\n      // Check if the product has any selected manufacturer\n      const hasSelectedManufacturers = selectedManufacturers.some(manufacturer => product.manufacturer === manufacturer.value);\n      // If both property and manufacturer filters are selected, only show products that match both\n      if (selectedProperties.length > 0 && selectedManufacturers.length > 0) {\n        return hasSelectedProperties && hasSelectedManufacturers;\n      }\n      // If only property filter is selected, show products that match any selected property\n      else if (selectedProperties.length > 0) {\n        return hasSelectedProperties;\n      }\n      // If only manufacturer filter is selected, show products that match any selected manufacturer\n      else if (selectedManufacturers.length > 0) {\n        return hasSelectedManufacturers;\n      }\n      // If no filters are selected, show all products\n      else {\n        return true;\n      }\n    });\n  }\n}\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)();\n};\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 16,\n  vars: 3,\n  consts: [[1, \"product-container\"], [1, \"left-container\"], [1, \"filters\"], [1, \"filter\", \"properties\"], [1, \"filter-titel\"], [1, \"properties-title\"], [4, \"ngFor\", \"ngForOf\"], [1, \"filter\", \"manufactory\"], [1, \"manufactory-titel\"], [1, \"right-container\"], [1, \"product-grid\"], [\"class\", \"product-card\", \"style\", \"width: 16rem\", 4, \"ngFor\", \"ngForOf\"], [1, \"checkbox-list\"], [1, \"property-name\"], [\"type\", \"checkbox\", 3, \"value\", \"ngModel\", \"ngModelChange\", \"change\"], [1, \"product-card\", 2, \"width\", \"16rem\"], [1, \"product-image\", 3, \"src\"], [1, \"product-card-body\"], [1, \"product-name\"], [1, \"product-price\"], [1, \"product-base-price\"], [1, \"product-delivery\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"h4\", 4);\n      i0.ɵɵtext(5, \"Filter\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"p\", 5);\n      i0.ɵɵtext(7, \"Eigenschaften\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(8, AppComponent_ng_container_8_Template, 5, 3, \"ng-container\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"div\", 7)(10, \"p\", 8);\n      i0.ɵɵtext(11, \"Hersteller\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(12, AppComponent_ng_container_12_Template, 5, 3, \"ng-container\", 6);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(13, \"div\", 9)(14, \"div\", 10);\n      i0.ɵɵtemplate(15, AppComponent_div_15_Template, 11, 5, \"div\", 11);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(8);\n      i0.ɵɵproperty(\"ngForOf\", ctx.propertyOptions);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngForOf\", ctx.manufacturerOptions);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", ctx.filteredProducts);\n    }\n  },\n  dependencies: [i1.NgForOf, i2.CheckboxControlValueAccessor, i2.NgControlStatus, i2.NgModel],\n  styles: [\".product-container[_ngcontent-%COMP%] {\\n  display: grid;\\n  grid-template-columns: 1fr 4fr;\\n  gap: 4rem;\\n  margin-top: 5rem;\\n  padding: 1rem 7rem;\\n}\\n\\n.properties[_ngcontent-%COMP%] {\\n  margin-bottom: 3rem;\\n}\\n\\n.properties-title[_ngcontent-%COMP%] {\\n  text-decoration: underline;\\n}\\n\\n.checkbox-list[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: space-between;\\n  margin-bottom: 7px;\\n}\\n\\n.property-name[_ngcontent-%COMP%] {\\n  margin-right: 2.5rem;\\n}\\n\\n.manufactory-titel[_ngcontent-%COMP%] {\\n  text-decoration: underline;\\n}\\n\\n.product-grid[_ngcontent-%COMP%] {\\n  display: grid;\\n  grid-template-columns: repeat(4, 1fr);\\n  gap: 1rem;\\n  width: 18rem;\\n}\\n\\n.product-card[_ngcontent-%COMP%] {\\n  text-align: center;\\n  border: none;\\n  line-height: 0.4;\\n  font-size: 14px;\\n}\\n\\n.product-name[_ngcontent-%COMP%] {\\n  font-size: 1.3rem;\\n  line-height: 1;\\n}\\n\\n.product-price[_ngcontent-%COMP%] {\\n  margin-top: 1.5rem;\\n  font-size: 1.5rem;\\n  font-weight: 500;\\n}\\n\\n.product-base-price[_ngcontent-%COMP%], .product-delivery[_ngcontent-%COMP%] {\\n  color: gray;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYXBwLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsYUFBQTtFQUNBLDhCQUFBO0VBQ0EsU0FBQTtFQUNBLGdCQUFBO0VBQ0Esa0JBQUE7QUFDRjs7QUFJQTtFQUNFLG1CQUFBO0FBREY7O0FBS0E7RUFDRSwwQkFBQTtBQUZGOztBQUlBO0VBQ0UsYUFBQTtFQUNBLDhCQUFBO0VBQ0Esa0JBQUE7QUFERjs7QUFHQTtFQUNFLG9CQUFBO0FBQUY7O0FBRUE7RUFDRSwwQkFBQTtBQUNGOztBQUlBO0VBQ0UsYUFBQTtFQUNBLHFDQUFBO0VBQ0EsU0FBQTtFQUNBLFlBQUE7QUFERjs7QUFHQTtFQUNFLGtCQUFBO0VBQ0EsWUFBQTtFQUNBLGdCQUFBO0VBQ0EsZUFBQTtBQUFGOztBQUVBO0VBQ0UsaUJBQUE7RUFDQSxjQUFBO0FBQ0Y7O0FBQ0E7RUFDRSxrQkFBQTtFQUNBLGlCQUFBO0VBQ0EsZ0JBQUE7QUFFRjs7QUFBQTs7RUFFRSxXQUFBO0FBR0YiLCJzb3VyY2VzQ29udGVudCI6WyIucHJvZHVjdC1jb250YWluZXIge1xuICBkaXNwbGF5OiBncmlkO1xuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciA0ZnI7XG4gIGdhcDogNHJlbTtcbiAgbWFyZ2luLXRvcDogNXJlbTtcbiAgcGFkZGluZzogMXJlbSA3cmVtO1xufVxuLy8gICAgPDw8PDw8PDw8PDwgTGVmdCBTaWRlID4+Pj4+Pj4+Pj4+Pj5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLnByb3BlcnRpZXMge1xuICBtYXJnaW4tYm90dG9tOiAzcmVtO1xufVxuLmZpbHRlci10aXRlbCB7XG59XG4ucHJvcGVydGllcy10aXRsZSB7XG4gIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xufVxuLmNoZWNrYm94LWxpc3Qge1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIG1hcmdpbi1ib3R0b206IDdweDtcbn1cbi5wcm9wZXJ0eS1uYW1lIHtcbiAgbWFyZ2luLXJpZ2h0OiAyLjVyZW07XG59XG4ubWFudWZhY3RvcnktdGl0ZWwge1xuICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcbn1cbi8vICAgIDw8PDw8PDw8PDw8IFJpZ2h0IFNpZGUgPj4+Pj4+Pj4+Pj4+PlxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4ucHJvZHVjdC1ncmlkIHtcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoNCwgMWZyKTtcbiAgZ2FwOiAxcmVtO1xuICB3aWR0aDogMThyZW07XG59XG4ucHJvZHVjdC1jYXJkIHtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBib3JkZXI6IG5vbmU7XG4gIGxpbmUtaGVpZ2h0OiAwLjQ7XG4gIGZvbnQtc2l6ZTogMTRweDtcbn1cbi5wcm9kdWN0LW5hbWUge1xuICBmb250LXNpemU6IDEuM3JlbTtcbiAgbGluZS1oZWlnaHQ6IDE7XG59XG4ucHJvZHVjdC1wcmljZSB7XG4gIG1hcmdpbi10b3A6IDEuNXJlbTtcbiAgZm9udC1zaXplOiAxLjVyZW07XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG59XG4ucHJvZHVjdC1iYXNlLXByaWNlLFxuLnByb2R1Y3QtZGVsaXZlcnkge1xuICBjb2xvcjogZ3JheTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["productsData","i0","AppComponent","constructor","propertyOptions","getPropertyOptions","manufacturerOptions","getManufacturerOptions","filteredProducts","products","productCounts","forEach","product","properties","property","hasOwnProperty","Object","keys","count","push","label","value","selected","manufacturerCounts","manufacturer","filterProducts","selectedProperties","filter","option","selectedManufacturers","hasSelectedProperties","every","includes","hasSelectedManufacturers","some","length","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["/Users/albanselimi/Desktop/git-hub-projects/product-filter-task/src/app/app.component.ts","/Users/albanselimi/Desktop/git-hub-projects/product-filter-task/src/app/app.component.html"],"sourcesContent":["import { Component } from \"@angular/core\";\nimport productsData from \"src/assets/data/products.json\"; // Import data from a JSON file\n\n@Component({\n  selector: \"app-root\",\n  templateUrl: \"./app.component.html\", // Define the template file for the component\n  styleUrls: [\"./app.component.scss\"], // Define the style file for the component\n})\nexport class AppComponent {\n  products = productsData; // Assign the data from the JSON file to the 'products' property\n  propertyOptions: { label: string; value: string; selected: boolean }[]; // Declare a property to hold the property filter options\n  manufacturerOptions: { label: string; value: string; selected: boolean }[]; // Declare a property to hold the manufacturer filter options\n  filteredProducts: any[]; // Declare a property to hold the filtered products\n\n  constructor() {\n    // Initialize the property and manufacturer filter options, and set the initial filtered products to all products\n    this.propertyOptions = this.getPropertyOptions();\n    this.manufacturerOptions = this.getManufacturerOptions();\n    this.filteredProducts = this.products;\n  }\n\n  // Function to generate the property filter options\n  getPropertyOptions() {\n    // Declare an empty array to store the property options\n    const propertyOptions: {\n      label: string;\n      value: string;\n      selected: boolean;\n      count: number;\n    }[] = [];\n\n    // Declare an empty object to store the count of products for each property\n    const productCounts: { [property: string]: number } = {};\n\n    // Loop through each product and count the number of products for each property\n    this.products.forEach((product) => {\n      product.properties.forEach((property) => {\n        if (productCounts.hasOwnProperty(property)) {\n          productCounts[property]++;\n        } else {\n          productCounts[property] = 1;\n        }\n      });\n    });\n\n    // Loop through each property and create an option for it with the count of products that have that property\n    Object.keys(productCounts).forEach((property) => {\n      const count = productCounts[property];\n      propertyOptions.push({\n        label: `${property} (${count})`,\n        value: property,\n        selected: false,\n        count: count,\n      });\n    });\n\n    // Return the array of property options\n    return propertyOptions;\n  }\n\n  // Function to generate the manufacturer filter options\n  getManufacturerOptions() {\n    // Declare an array to hold the manufacturer filter options, with an initial empty array\n    const manufacturerOptions: {\n      label: string;\n      value: string;\n      selected: boolean;\n      count: number;\n    }[] = [];\n\n    // Declare an object to hold the count of products for each manufacturer, with an initial empty object\n    const manufacturerCounts: { [manufacturer: string]: number } = {};\n\n    // Loop through each product to count the number of products for each manufacturer\n    this.products.forEach((product) => {\n      const manufacturer = product.manufacturer;\n      if (manufacturerCounts.hasOwnProperty(manufacturer)) {\n        manufacturerCounts[manufacturer]++;\n      } else {\n        manufacturerCounts[manufacturer] = 1;\n      }\n    });\n\n    // Loop through each manufacturer and create an option, including the product count, and add it to the options array\n    Object.keys(manufacturerCounts).forEach((manufacturer) => {\n      const count = manufacturerCounts[manufacturer];\n      manufacturerOptions.push({\n        label: `${manufacturer} (${count})`,\n        value: manufacturer,\n        selected: false,\n        count: count,\n      });\n    });\n\n    // Return the options array\n    return manufacturerOptions;\n  }\n\n  filterProducts() {\n    // Get the selected property and manufacturer filter options\n    const selectedProperties = this.propertyOptions.filter(\n      (option) => option.selected\n    );\n    const selectedManufacturers = this.manufacturerOptions.filter(\n      (option) => option.selected\n    );\n\n    // Filter the products based on the selected filter options\n    this.filteredProducts = this.products.filter((product) => {\n      // Check if the product has all selected properties\n      const hasSelectedProperties = selectedProperties.every((property) =>\n        product.properties.includes(property.value)\n      );\n\n      // Check if the product has any selected manufacturer\n      const hasSelectedManufacturers = selectedManufacturers.some(\n        (manufacturer) => product.manufacturer === manufacturer.value\n      );\n\n      // If both property and manufacturer filters are selected, only show products that match both\n      if (selectedProperties.length > 0 && selectedManufacturers.length > 0) {\n        return hasSelectedProperties && hasSelectedManufacturers;\n      }\n      // If only property filter is selected, show products that match any selected property\n      else if (selectedProperties.length > 0) {\n        return hasSelectedProperties;\n      }\n      // If only manufacturer filter is selected, show products that match any selected manufacturer\n      else if (selectedManufacturers.length > 0) {\n        return hasSelectedManufacturers;\n      }\n      // If no filters are selected, show all products\n      else {\n        return true;\n      }\n    });\n  }\n}\n","<div class=\"product-container\">\n  <!-- Left Column -->\n  <div class=\"left-container\">\n    <div class=\"filters\">\n      <div class=\"filter properties\">\n        <h4 class=\"filter-titel\">Filter</h4>\n        <p class=\"properties-title\">Eigenschaften</p>\n        <ng-container *ngFor=\"let option of propertyOptions\">\n          <div class=\"checkbox-list\">\n            <span class=\"property-name\">{{ option.label }}</span>\n            <input\n              type=\"checkbox\"\n              [value]=\"option.value\"\n              [(ngModel)]=\"option.selected\"\n              (change)=\"filterProducts()\"\n            />\n          </div>\n        </ng-container>\n      </div>\n\n      <!-- Manufacturer Filter -->\n      <div class=\"filter manufactory\">\n        <p class=\"manufactory-titel\">Hersteller</p>\n        <ng-container *ngFor=\"let option of manufacturerOptions\">\n          <div class=\"checkbox-list\">\n            <span>{{ option.label }}</span>\n            <input\n              type=\"checkbox\"\n              [value]=\"option.value\"\n              [(ngModel)]=\"option.selected\"\n              (change)=\"filterProducts()\"\n            />\n          </div>\n        </ng-container>\n      </div>\n    </div>\n  </div>\n\n  <!-- Right Column -->\n  <div class=\"right-container\">\n    <div class=\"product-grid\">\n      <div\n        class=\"product-card\"\n        style=\"width: 16rem\"\n        *ngFor=\"let product of filteredProducts\"\n      >\n        <img class=\"product-image\" [src]=\"product.image\" />\n        <div class=\"product-card-body\">\n          <p class=\"product-name\">{{ product.name }}</p>\n          <p class=\"product-price\">{{ product.price }} €</p>\n          <p class=\"product-base-price\">\n            {{ product.basePrice.price }}/{{ product.basePrice.unit }}\n          </p>\n          <p class=\"product-delivery\">Preis inkl. MwSt., zzgl.Versand</p>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}